version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kuda-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: kuda_production
      POSTGRES_USER: kuda_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/01-init.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kuda_admin -d kuda_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kuda-network

  # Redis Cache (for session management and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: kuda-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kuda-network

  # KUDA Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: kuda-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://kuda_admin:${POSTGRES_PASSWORD}@postgres:5432/kuda_production
      DB_POOL_MAX: 20
      DB_IDLE_TIMEOUT: 30000
      DB_CONNECTION_TIMEOUT: 5000

      # Server
      PORT: 4000
      NODE_ENV: production

      # AWS S3
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d

      # Gmail API (Phase 2)
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REDIRECT_URI: ${GMAIL_REDIRECT_URI}
      GMAIL_REFRESH_TOKEN: ${GMAIL_REFRESH_TOKEN}
      GMAIL_FROM_EMAIL: ${GMAIL_FROM_EMAIL}

      # KUDA Platform
      KUDA_BASE_URL: ${KUDA_BASE_URL}

      # Notification Processing
      ENABLE_NOTIFICATION_CRON: true
      NOTIFICATION_CRON_SCHEDULE: "*/5 * * * *"

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379

      # Logging
      LOG_LEVEL: info

      # CORS
      CORS_ORIGIN: ${FRONTEND_URL}

      # Feature Flags
      ENABLE_LOGO_DETECTION: true
      ENABLE_COLOR_EXTRACTION: true
      ENABLE_DOCUMENT_SCANNING: true
      ENABLE_MINIMAL_BRIEF: true

      # Performance
      ENABLE_PERFORMANCE_LOGGING: true
      SLOW_QUERY_THRESHOLD_MS: 1000
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kuda-network

  # Nginx Reverse Proxy (optional - for production SSL/load balancing)
  nginx:
    image: nginx:alpine
    container_name: kuda-nginx
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - kuda-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_cache:
    driver: local

networks:
  kuda-network:
    driver: bridge
